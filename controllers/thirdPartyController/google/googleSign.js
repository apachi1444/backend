const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
require("dotenv").config();
const User = require("../../../Models/User");
passport.serializeUser(function (user, done) {
  // make it into a cookie
  // the null argument is for the error generated by the serializeUse function
  // store that id into a cookie
  // first when we will send the cookie with the id
  // then the server will encrypt the id first before sending it
  // then when the user will send it back the server will decrypt it
  // but the cookieSession will encrypt it not the serializefunction which is inside the index file
  done(null, user.id);
});

// here we will send the id in the cookie
passport.deserializeUser(function (id, done) {
  // he has to check whose id is that
  User.findById(id).then((user) => {
    done(null, user);
  });
});

passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET_KEY,
      // when the user selects his email we will redirect him to the call back function
      callbackURL: "http://localhost:5000/api/sign/google/callback",
      passReqToCallback: true,
    },
    (request, accessToken, refreshToken, profile, done) => {
      const user = User.findOne({ googleId: profile.id }).then((user) => {
        if (user) {
          console.log("this profile is already in our database " + user);
          done(null, user.id);
        } else {
          console.log(profile.emails[0].value);
          let email = profile.emails[0].value;
          const userSaved = new User({
            googleId: profile.id,
            username: profile.displayName,
            email: email,
          })
            .save()
            .then((userSaved) => {
              if (userSaved) {
                console.log("saved with sucess");
                done(null, userSaved);
              }
            });
        }
      });
    }
  )
);
